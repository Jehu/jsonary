{"title":"Jsonary Schema object","description":"A wrapper around a JSON Schema definition","methods":{"allowedAdditionalProperties":{"description":"Whether the schemas allow the use of extra properties","return":{"title":"boolean","type":["boolean"]}},"andSchemas":{"description":"List of schemas that describe any data this schema describes.\n\nThis is taken from both the v3-style \"extends\" property, and the v4-style \"allOf\" property.","return":{"$ref":"schemalist.json"}},"asList":{"description":"Returns a schema list containing just the current item","return":{"$ref":"schemalist.json"}},"types":{"description":"The basic types that are permitted under this schema","return":{"title":"array of basic types","type":["array"],"items":{"title":"basic type","description":"One of the seven basic types defined in the JSON Schema specification","enum":["null","boolean","integer","number","string","object","array"]},"uniqueItems":false}},"enumData":{"description":"The enum values defined by this schema, as a Jsonary Data wrapper (holding either an array or undefined)","return":{"$ref":"data.json"}},"enumValues":{"description":"The enum values defined by the schema, as a raw array (or undefined)","return":{"title":"array of values","type":["array"],"uniqueItems":true}},"equals":{"description":"Whether two schemas are equal.\n\nThis is not very advanced - it just performs an equality check on the data.\n\nIf the same constraints are expressed two different ways, they will evaluate as non-equal.","return":{"title":"boolean","type":["boolean"]},"arguments":[{"$ref":"#"}]},"exclusiveMaximum":{"description":"Whether the value defined in maximum() is exclusive or not","return":{"title":"boolean","type":["boolean"]}},"exclusiveMinimum":{"description":"Whether the value defined in minimum() is exclusive or not","return":{"title":"boolean","type":["boolean"]}},"getFull":{"description":"Fetches the \"full\" version of the data, if this schema is a reference.\n\nIf it is not a reference, the callback is called immediately.","arguments":[{"description":"callback(fullSchema)","title":"callback"}],"return":{"$ref":"#"}},"getLink":{"description":"Gets a potential link from this schema, filtering by link relationship","arguments":[{"title":"rel","type":["string"]}],"return":{"$ref":"potentiallink.json"}},"indexSchemas":{"arguments":[{"title":"index","type":["integer"],"minimum":0}],"description":"The schemas that describe the Nth child of any item described by this schema","return":{"$ref":"schemalist.json"}},"links":{"description":"List of potential links defined in this schema","return":{"title":"array of potential links","type":["array"],"items":{"$ref":"potentiallink.json"}}},"maxItems":{"description":"The maximum number of items allowed for array instances following this schema.","return":{"type":["integer"],"minimum":0,"title":"maximum array length","description":"(may be undefined)"}},"maximum":{"description":"Maximum numerical value for instances following this schema.\n\nThis limit may or may not be exclusive, depending on exclusiveMaximum()","return":{"title":"maximum value","type":["number"],"description":"(may be undefined)"}},"minItems":{"description":"The minimum number of items allowed for array instances following this schema.","return":{"title":"minimum array length","type":["integer"],"minimum":0,"description":""}},"minimum":{"description":"Minimum numerical value for instances following this schema.\n\nThis limit may or may not be exclusive, depending on exclusiveMinimum()","return":{"title":"minimum value","type":["number"],"description":"(may be undefined)"}},"numberInterval":{"description":"Any numeric instance following this schema must be a multiple of this value, if it is defined.","return":{"title":"factor","type":["number"],"description":"(may be undefined)","minimum":0,"exclusiveMinimum":true}},"orSchemas":{"description":"Groups of schemas - instances following this schema must follow at least one from each group.\n\nThis is populated from the \"anyOf\" property in the schema definition.","return":{"title":"array of array of schemas","type":["array"],"items":{"title":"\"or\" set","type":["array"],"items":{"$ref":"#"}}}},"propertyDependencies":{"description":"Any schemas that must also be followed if this property is defined on object instances.","arguments":[{"title":"key","type":["string"]}],"return":{"$ref":"schemalist.json"}},"propertySchemas":{"description":"The schemas that describe the value of this property in object instances.","arguments":[{"title":"key","type":["string"]}],"return":{"$ref":"schemalist.json"}},"referenceUrl":{"description":"The canonical URL for this schema, with a JSON Pointer fragment part.","return":{"title":"absolute URL","type":["string"]}},"requiredProperties":{"description":"Returns the properties which must be defined on object instances following this schema.","return":{"title":"array of keys","type":["array"],"items":{"type":["string"],"title":"key name"}}},"title":{"description":"Title for this schema","return":{"title":"title (or null)","type":["null","string"]}},"xorSchemas":{"description":"Groups of schemas - instances following this schema must follow exactly one from each group.\n\nThis is populated from the \"oneOf\" property in the schema definition.\n\nIf the \"type\" keyword includes object types (v3-style), then the contents of \"type\" is converted into an XOR group as well.","return":{"title":"array of arrays of schemas","type":["array"],"items":{"title":"\"xor\" group","type":["array"],"items":{"$ref":"#"}}}}},"properties":{"data":{"$ref":"data.json"}}}